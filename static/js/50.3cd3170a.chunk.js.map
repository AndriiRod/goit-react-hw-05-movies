{"version":3,"file":"static/js/50.3cd3170a.chunk.js","mappings":"6KAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEVC,EAAiB,mCAAG,oGACDF,EAAAA,EAAAA,IAAU,sBAAuB,CACtDG,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJU,cAClBC,EADkB,yBAOjBA,EAASC,MAPQ,2CAAH,qDAUjBC,EAAiB,mCAAG,WAAMC,GAAN,uFACDT,EAAAA,EAAAA,IAAA,iBAAoBS,GAAM,CAC/CN,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJU,cAClBC,EADkB,yBAOjBA,EAASC,MAPQ,2CAAH,sDAUjBG,EAAiB,mCAAG,WAAMC,GAAN,uFACDX,EAAAA,EAAAA,IAAA,gBAA2B,CAChDG,OAAQ,CACNC,QAASH,EACTI,SAAU,QACVO,MAAOD,EACPE,cAAe,UANK,cAClBP,EADkB,yBASjBA,EAASC,MATQ,2CAAH,sDAWjBO,EAAY,mCAAG,WAAML,GAAN,uFACIT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAkC,CACvDN,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJK,cACbC,EADa,yBAOZA,EAASC,MAPG,2CAAH,sDAUZQ,EAAe,mCAAG,WAAMN,GAAN,uFACCT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,YAAkC,CACvDN,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJQ,cAChBC,EADgB,yBAOfA,EAASC,MAPM,2CAAH,sDAUfS,EAAM,CACVd,kBAAAA,EACAM,kBAAAA,EACAE,kBAAAA,EACAI,aAAAA,EACAC,gBAAAA,GAGF,K,mEC1DA,EAJqB,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACtB,OAAO,yBAAMA,GACd,C,yKCOD,EAToB,SAAC,GAAc,IAAZV,EAAW,EAAXA,KACbW,EAAoBX,EAApBW,OAAQC,EAAYZ,EAAZY,QAChB,OACE,4BACE,wBAAKD,KACL,uBAAIC,MAGT,E,SCSD,EAhBoB,SAAC,GAAc,IAAZZ,EAAW,EAAXA,KACrB,OAAoB,IAAhBA,EAAKa,QACA,uDAGP,wBACGb,EAAKc,KAAI,YAA2B,IAAxBZ,EAAuB,EAAvBA,GAAOa,GAAgB,YAClC,OACE,yBACE,SAAC,EAAD,CAAaf,KAAMe,KADZb,EAIZ,KAGN,ECVKc,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WA+BZ,EA7BgB,WACd,OAA4BC,EAAAA,EAAAA,UAASD,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,MAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,2FACjBR,EAAUH,GADO,kBAGQP,EAAAA,EAAAA,gBAAoBe,GAH5B,OAGTzB,EAHS,OAIfsB,EAAWtB,EAAS6B,SACpBT,EAAUH,GALK,gDAOfO,EAAgB,KAAMb,SACtBS,EAAUH,GARK,yDAAH,qDAWhBW,GACD,GAAE,CAACH,KAGF,2BACGN,IAAWF,IAAkB,SAACa,EAAA,EAAD,IAC7BX,IAAWF,IAAmB,SAACc,EAAA,EAAD,CAAcpB,QAASY,IACrDJ,IAAWF,IAAmB,SAAC,EAAD,CAAahB,KAAMoB,MAGvD,C","sources":["api/api.js","components/ErrorMessage/ErrorMessage.jsx","components/ReviewsItem/ReviewsItem.jsx","components/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '60cc6ad85da178dfca0e63709f5042e0';\n\nconst GetTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nconst GetDetailsOfMovie = async id => {\n  const response = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nconst GetMoviesByTitles = async name => {\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query: name,\n      include_adult: 'true',\n    },\n  });\n  return response.data;\n};\nconst GetMovieCast = async id => {\n  const response = await axios.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nconst GetMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nconst api = {\n  GetTrendingMovies,\n  GetDetailsOfMovie,\n  GetMoviesByTitles,\n  GetMovieCast,\n  GetMovieReviews,\n};\n\nexport default api;\n","import PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ message }) => {\n  return <div>{message}</div>;\n};\n\nexport default ErrorMessage;\n\nErrorMessage.propTypes = {\n  message: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\n\nconst ReviewsItem = ({ data }) => {\n  const { author, content } = data;\n  return (\n    <div>\n      <h2>{author}</h2>\n      <p>{content}</p>\n    </div>\n  );\n};\nexport default ReviewsItem;\n\nReviewsItem.propTypes = {\n  author: PropTypes.string,\n  content: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport ReviewsItem from 'components/ReviewsItem/';\n\nconst ReviewsList = ({ data }) => {\n  if (data.length === 0) {\n    return <div>This film has no reviews</div>;\n  }\n  return (\n    <ul>\n      {data.map(({ id, ...otherData }) => {\n        return (\n          <li key={id}>\n            <ReviewsItem data={otherData} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nexport default ReviewsList;\n\nReviewsList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n    })\n  ),\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from 'api/api';\nimport Loader from 'components/Loader/';\nimport ErrorMessage from 'components/ErrorMessage/';\n\nimport ReviewsList from 'components/ReviewsList/';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\nconst Reviews = () => {\n  const [status, setStatus] = useState(Status.IDLE);\n  const [reviews, setReviews] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const { movieId } = useParams();\n  useEffect(() => {\n    const getRequest = async () => {\n      setStatus(Status.PENDING);\n      try {\n        const response = await api.GetMovieReviews(movieId);\n        setReviews(response.results);\n        setStatus(Status.RESOLVED);\n      } catch (error) {\n        setErrorMessage(error.message);\n        setStatus(Status.REJECTED);\n      }\n    };\n    getRequest();\n  }, [movieId]);\n\n  return (\n    <div>\n      {status === Status.PENDING && <Loader />}\n      {status === Status.REJECTED && <ErrorMessage message={errorMessage} />}\n      {status === Status.RESOLVED && <ReviewsList data={reviews} />}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","API_KEY","GetTrendingMovies","params","api_key","language","response","data","GetDetailsOfMovie","id","GetMoviesByTitles","name","query","include_adult","GetMovieCast","GetMovieReviews","api","message","author","content","length","map","otherData","Status","useState","status","setStatus","reviews","setReviews","errorMessage","setErrorMessage","movieId","useParams","useEffect","getRequest","results","Loader","ErrorMessage"],"sourceRoot":""}