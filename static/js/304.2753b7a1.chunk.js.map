{"version":3,"file":"static/js/304.2753b7a1.chunk.js","mappings":"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","sources":["api/api.js","components/ErrorMessage/ErrorMessage.jsx","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '60cc6ad85da178dfca0e63709f5042e0';\n\nconst GetTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nconst GetDetailsOfMovie = async id => {\n  const response = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nconst GetMoviesByTitles = async name => {\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query: name,\n      include_adult: 'true',\n    },\n  });\n  return response.data;\n};\nconst GetMovieCast = async id => {\n  const response = await axios.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nconst GetMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nconst api = {\n  GetTrendingMovies,\n  GetDetailsOfMovie,\n  GetMoviesByTitles,\n  GetMovieCast,\n  GetMovieReviews,\n};\n\nexport default api;\n","import PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ message }) => {\n  return <div>{message}</div>;\n};\n\nexport default ErrorMessage;\n\nErrorMessage.propTypes = {\n  message: PropTypes.string,\n};\n","import { Link, Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\n\nimport Loader from 'components/Loader/';\n\nconst MovieInfo = ({ data }) => {\n  const { original_title, vote_average, overview, genres, poster_path } = data;\n\n  return (\n    <>\n      <img\n        width=\"400px\"\n        src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n        alt={original_title}\n      />\n      <p>User Score:{vote_average}</p>\n      <h2>Overview</h2>\n      <p>{overview}</p>\n      <h2>Genires</h2>\n      <p>{genres.map(genre => genre.name).join(', ')}</p>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieInfo;\n","import { useParams, Link, useLocation } from 'react-router-dom';\nimport { useEffect, useRef, useState } from 'react';\n\nimport MovieInfo from 'components/MovieInfo/';\nimport ErrorMessage from 'components/ErrorMessage/';\nimport Loader from 'components/Loader/';\n\nimport api from 'api/api';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState();\n  const [status, setStatus] = useState(Status.IDLE);\n  const [errorMessage, setErrorMessage] = useState();\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backLink = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n    try {\n      const getRequest = async () => {\n        const response = await api.GetDetailsOfMovie(movieId);\n        setMovie(response);\n        setStatus(Status.RESOLVED);\n      };\n      getRequest();\n    } catch (error) {\n      setErrorMessage(error.message);\n      setStatus(Status.REJECTED);\n    }\n  }, [movieId]);\n\n  return (\n    <section>\n      <Link to={backLink.current}>Go Back</Link>\n      {status === Status.PENDING && <Loader />}\n      {status === Status.REJECTED && <ErrorMessage message={errorMessage} />}\n      {status === Status.RESOLVED && <MovieInfo data={movie} />}\n    </section>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["axios","API_KEY","GetTrendingMovies","params","api_key","language","response","data","GetDetailsOfMovie","id","GetMoviesByTitles","name","query","include_adult","GetMovieCast","GetMovieReviews","api","message","original_title","vote_average","overview","genres","poster_path","width","src","alt","map","genre","join","to","Suspense","fallback","Loader","Status","useState","movie","setMovie","status","setStatus","errorMessage","setErrorMessage","movieId","useParams","location","useLocation","backLink","useRef","state","from","useEffect","getRequest","error","current","ErrorMessage"],"sourceRoot":""}